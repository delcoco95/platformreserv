#!/bin/bash

# üîç Script de validation de l'installation Docker BookAuto
# V√©rifie que tout est pr√™t pour le d√©ploiement

set -e

echo "üîç Validation de l'installation BookAuto Docker"
echo "=============================================="

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

success=0
warnings=0
errors=0

check_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
    ((success++))
}

check_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
    ((warnings++))
}

check_error() {
    echo -e "${RED}‚ùå $1${NC}"
    ((errors++))
}

check_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# 1. V√©rification des pr√©requis
echo "üìã V√©rification des pr√©requis..."
if command -v docker &> /dev/null; then
    DOCKER_VERSION=$(docker --version | cut -d' ' -f3 | cut -d',' -f1)
    check_success "Docker install√© (version $DOCKER_VERSION)"
else
    check_error "Docker n'est pas install√©"
fi

if command -v docker-compose &> /dev/null; then
    COMPOSE_VERSION=$(docker-compose --version | cut -d' ' -f3 | cut -d',' -f1)
    check_success "Docker Compose install√© (version $COMPOSE_VERSION)"
else
    check_error "Docker Compose n'est pas install√©"
fi

# 2. V√©rification des fichiers de configuration
echo -e "\nüìÅ V√©rification des fichiers de configuration..."

# Docker Compose files
if [ -f "docker-compose.yml" ]; then
    check_success "docker-compose.yml pr√©sent"
else
    check_error "docker-compose.yml manquant"
fi

if [ -f "docker-compose.dev.yml" ]; then
    check_success "docker-compose.dev.yml pr√©sent"
else
    check_error "docker-compose.dev.yml manquant"
fi

# Dockerfiles
if [ -f "backend/Dockerfile" ]; then
    check_success "backend/Dockerfile pr√©sent"
else
    check_error "backend/Dockerfile manquant"
fi

if [ -f "frontend/Dockerfile" ]; then
    check_success "frontend/Dockerfile pr√©sent"
else
    check_error "frontend/Dockerfile manquant"
fi

if [ -f "frontend/Dockerfile.dev" ]; then
    check_success "frontend/Dockerfile.dev pr√©sent"
else
    check_error "frontend/Dockerfile.dev manquant"
fi

# 3. V√©rification des fichiers .env
echo -e "\nüîê V√©rification des fichiers .env..."

if [ -f "backend/.env" ]; then
    check_success "backend/.env pr√©sent"
    # V√©rifier les variables essentielles
    if grep -q "MONGO_URI" backend/.env; then
        check_success "MONGO_URI configur√©"
    else
        check_error "MONGO_URI manquant dans backend/.env"
    fi
    
    if grep -q "JWT_SECRET" backend/.env; then
        check_success "JWT_SECRET configur√©"
    else
        check_error "JWT_SECRET manquant dans backend/.env"
    fi
else
    check_error "backend/.env manquant"
fi

if [ -f "frontend/.env" ]; then
    check_success "frontend/.env pr√©sent"
    if grep -q "VITE_API_URL" frontend/.env; then
        check_success "VITE_API_URL configur√©"
    else
        check_error "VITE_API_URL manquant dans frontend/.env"
    fi
else
    check_error "frontend/.env manquant"
fi

# 4. V√©rification de la structure des dossiers
echo -e "\nüìÇ V√©rification de la structure..."

if [ -d "backend" ]; then
    check_success "Dossier backend pr√©sent"
else
    check_error "Dossier backend manquant"
fi

if [ -d "frontend" ]; then
    check_success "Dossier frontend pr√©sent"
else
    check_error "Dossier frontend manquant"
fi

if [ -d "scripts" ]; then
    check_success "Dossier scripts pr√©sent"
else
    check_warning "Dossier scripts manquant (optionnel)"
fi

# 5. V√©rification des package.json
echo -e "\nüì¶ V√©rification des packages..."

if [ -f "backend/package.json" ]; then
    check_success "backend/package.json pr√©sent"
else
    check_error "backend/package.json manquant"
fi

if [ -f "frontend/package.json" ]; then
    check_success "frontend/package.json pr√©sent"
else
    check_error "frontend/package.json manquant"
fi

# 6. V√©rification des ports
echo -e "\nüåê V√©rification des ports..."

if ! lsof -Pi :3000 -sTCP:LISTEN -t >/dev/null 2>&1; then
    check_success "Port 3000 disponible"
else
    check_warning "Port 3000 d√©j√† utilis√© (frontend)"
fi

if ! lsof -Pi :5000 -sTCP:LISTEN -t >/dev/null 2>&1; then
    check_success "Port 5000 disponible"
else
    check_warning "Port 5000 d√©j√† utilis√© (backend)"
fi

if ! lsof -Pi :27017 -sTCP:LISTEN -t >/dev/null 2>&1; then
    check_success "Port 27017 disponible"
else
    check_warning "Port 27017 d√©j√† utilis√© (MongoDB)"
fi

# 7. R√©sum√©
echo -e "\nüìä R√©sum√© de la validation:"
echo "=========================="
echo -e "${GREEN}‚úÖ Succ√®s: $success${NC}"
if [ $warnings -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Avertissements: $warnings${NC}"
fi
if [ $errors -gt 0 ]; then
    echo -e "${RED}‚ùå Erreurs: $errors${NC}"
fi

echo -e "\nüöÄ Commandes de d√©marrage:"
if [ $errors -eq 0 ]; then
    echo "   D√©veloppement:  docker-compose -f docker-compose.dev.yml up --build"
    echo "   Production:     docker-compose --profile production up --build"
    echo "   Script rapide:  ./start.sh dev"
    echo ""
    check_success "Configuration valid√©e ! Vous pouvez d√©marrer BookAuto"
else
    echo ""
    check_error "Des erreurs doivent √™tre corrig√©es avant de d√©marrer"
    echo ""
    echo "üìñ Consultez README-Docker.md pour plus d'informations"
fi

exit $errors
